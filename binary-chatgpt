<!DOCTYPE html>
<html lang="zh-Hant">
<head>
<meta charset="UTF-8" />
<meta name="viewport" content="width=device-width, initial-scale=1.0" />
<title>【天啟核心】緊急代碼輸入協議</title>
<script src="https://cdn.tailwindcss.com"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/tone/14.8.39/Tone.js"></script>
<style>
/* ===== 自訂動畫與特效 ===== */
@keyframes pulse-green {
  0%, 100% { box-shadow: 0 0 10px #00ff88; }
  50% { box-shadow: 0 0 30px #00ff88; }
}
@keyframes pulse-red {
  0%, 100% { box-shadow: 0 0 10px #ff0033; }
  50% { box-shadow: 0 0 30px #ff0033; }
}
.pulse-green { animation: pulse-green 0.5s ease; }
.pulse-red { animation: pulse-red 0.5s ease; }
.cut-line {
  background: repeating-linear-gradient(
    45deg, #ff5555, #ff5555 5px, #222 5px, #222 10px
  );
  height: 1rem;
  width: 80%;
  margin: 0 auto;
  border-top: 2px dashed #ff9999;
}
.intact-line {
  background: linear-gradient(90deg, #0f0, #0ff);
  height: 1rem;
  width: 90%;
  margin: 0 auto;
  border-top: 2px solid #88ff88;
}
#message-box {
  position: fixed;
  inset: 0;
  background: rgba(0,0,0,0.8);
  display: none;
  align-items: center;
  justify-content: center;
  z-index: 50;
}
#message-box.active { display: flex; }
</style>
</head>

<body class="bg-black text-white font-mono min-h-screen flex flex-col items-center justify-center p-4">
  <h1 class="text-2xl sm:text-4xl text-red-500 mb-4 text-center font-bold">【天啟核心】緊急代碼輸入協議</h1>
  <div id="game-container" class="w-full max-w-md bg-zinc-900 rounded-2xl border-4 border-zinc-700 p-4 shadow-2xl flex flex-col items-center">
    <div class="w-full mb-4 flex flex-col items-center space-y-2">
      <label class="text-sm text-gray-300">線路數量：</label>
      <select id="wireCount" class="bg-zinc-800 text-white p-2 rounded w-1/2 text-center">
        <option>4</option><option>6</option><option>8</option><option>10</option><option>12</option>
      </select>
      <label class="text-sm text-gray-300">倒數秒數：</label>
      <input id="timeLimit" type="number" class="bg-zinc-800 text-white p-2 rounded w-1/2 text-center" value="30" min="10" />
      <label class="text-sm text-gray-300">解鎖目標 (十進位)：</label>
      <input id="targetNumber" type="number" class="bg-zinc-800 text-white p-2 rounded w-1/2 text-center" placeholder="留空則隨機" />
      <button id="startBtn" class="mt-4 bg-red-600 hover:bg-red-700 text-white font-bold py-2 px-4 rounded-full shadow-lg">啟動任務</button>
    </div>

    <div id="game-area" class="hidden flex flex-col items-center space-y-4">
      <div id="timer" class="text-yellow-400 text-3xl font-bold">00:00</div>
      <div id="targetDisplay" class="text-4xl text-red-500 font-extrabold animate-pulse">???</div>
      <div id="wire-grid" class="grid grid-cols-3 gap-2 w-full mt-4"></div>
      <button id="confirmBtn" class="mt-4 bg-green-600 hover:bg-green-700 text-white font-bold py-2 px-4 rounded-full shadow-lg">確認</button>
    </div>
  </div>

  <!-- 自訂彈窗 -->
  <div id="message-box">
    <div class="bg-zinc-800 border-2 border-zinc-600 p-6 rounded-xl text-center">
      <h2 id="message-title" class="text-2xl mb-2"></h2>
      <p id="message-text" class="text-gray-300 mb-4"></p>
      <button id="closeMsg" class="bg-red-600 hover:bg-red-700 px-4 py-2 rounded">關閉</button>
    </div>
  </div>

<script>
/* ===== 音效系統設定 ===== */
let pulseLoop, bpm = 60;
const coreBeat = new Tone.MembraneSynth().toDestination();
const metalCut = new Tone.MetalSynth({frequency:200, envelope:{decay:0.2}}).toDestination();
const clickSound = new Tone.Synth({oscillator:{type:'square'}, envelope:{release:0.1}}).toDestination();
const successChord = new Tone.PolySynth(Tone.Synth).toDestination();
const explosion = new Tone.NoiseSynth({volume:-5, envelope:{attack:0.001, decay:0.3, sustain:0}}).toDestination();

/* ===== 遊戲邏輯 ===== */
let wireStates = [];
let targetBinary = [];
let countdown, timeLeft = 30, started = false;

const startBtn = document.getElementById('startBtn');
const confirmBtn = document.getElementById('confirmBtn');
const wireGrid = document.getElementById('wire-grid');
const targetDisplay = document.getElementById('targetDisplay');
const timerDisplay = document.getElementById('timer');
const messageBox = document.getElementById('message-box');
const messageTitle = document.getElementById('message-title');
const messageText = document.getElementById('message-text');
const closeMsg = document.getElementById('closeMsg');
const gameArea = document.getElementById('game-area');

function showMessage(title, text) {
  messageTitle.textContent = title;
  messageText.textContent = text;
  messageBox.classList.add('active');
}
closeMsg.onclick = () => { messageBox.classList.remove('active'); location.reload(); };

function startBGM() {
  Tone.start();
  pulseLoop = new Tone.Loop(time => { coreBeat.triggerAttackRelease("C1","8n"); }, "4n").start(0);
  Tone.Transport.bpm.value = bpm;
  Tone.Transport.start();
}

function adjustBPM() {
  if (timeLeft <= 5) bpm = 120;
  else if (timeLeft <= 15) bpm = 90;
  else bpm = 60;
  Tone.Transport.bpm.rampTo(bpm, 0.5);
  timerDisplay.style.textShadow = bpm>90 ? '0 0 20px red' : bpm>60 ? '0 0 10px orange' : '0 0 0px';
}

function startGame() {
  if (started) return;
  started = true;
  startBGM();
  const count = parseInt(document.getElementById('wireCount').value);
  timeLeft = parseInt(document.getElementById('timeLimit').value);
  let targetNum = document.getElementById('targetNumber').value || Math.floor(Math.random()*Math.pow(2,count));
  targetNum = Math.min(targetNum, Math.pow(2,count)-1);
  targetDisplay.textContent = targetNum;
  targetBinary = targetNum.toString(2).padStart(count,'0').split('');
  wireStates = new Array(count).fill(1);
  wireGrid.innerHTML = '';
  for(let i=0;i<count;i++){
    const wire = document.createElement('div');
    wire.className = 'intact-line rounded transition-all duration-200';
    wire.dataset.index=i;
    wire.onclick = () => toggleWire(wire);
    wireGrid.appendChild(wire);
  }
  gameArea.classList.remove('hidden');
  countdown = setInterval(()=>{
    timeLeft--;
    adjustBPM();
    timerDisplay.textContent = '00:' + String(timeLeft).padStart(2,'0');
    if(timeLeft<=0){ fail(); }
  },1000);
}

function toggleWire(el){
  const i = el.dataset.index;
  if(wireStates[i]===1){
    wireStates[i]=0;
    el.className='cut-line rounded transition-all duration-200';
    metalCut.triggerAttackRelease("16n");
  } else {
    wireStates[i]=1;
    el.className='intact-line rounded transition-all duration-200';
    clickSound.triggerAttackRelease("C4","8n");
  }
}

function checkResult(){
  clearInterval(countdown);
  let correct=true;
  document.querySelectorAll('#wire-grid div').forEach((el,i)=>{
    const expected = parseInt(targetBinary[i]);
    if(wireStates[i]===expected){
      el.classList.add('pulse-green');
    }else{
      el.classList.add('pulse-red');
      correct=false;
    }
  });
  setTimeout(()=>{
    if(correct) success();
    else fail();
  },800);
}

function success(){
  successChord.triggerAttackRelease(["C4","E4","G4"], "2n");
  Tone.Transport.stop();
  showMessage("任務成功","核心代碼已解除，方舟城市恢復穩定運行。");
}

function fail(){
  explosion.triggerAttackRelease("1n");
  Tone.Transport.stop();
  showMessage("任務失敗","核心爆炸！系統已關閉。");
}

startBtn.onclick = startGame;
confirmBtn.onclick = checkResult;
</script>
</body>
</html>
